package com.gwj.mygreendao.greendao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.nnxy.gjp.entity.User;

import com.nnxy.gjp.entity.Account;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ACCOUNT".
*/
public class AccountDao extends AbstractDao<Account, Integer> {

    public static final String TABLENAME = "ACCOUNT";

    /**
     * Properties of entity Account.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property AccId = new Property(0, Integer.class, "accId", true, "ACC_ID");
        public final static Property AccCreateDate = new Property(1, String.class, "accCreateDate", false, "ACC_CREATE_DATE");
        public final static Property AccType = new Property(2, Boolean.class, "accType", false, "ACC_TYPE");
        public final static Property AccStyle = new Property(3, String.class, "accStyle", false, "ACC_STYLE");
        public final static Property AccMoney = new Property(4, Double.class, "accMoney", false, "ACC_MONEY");
        public final static Property AccNote = new Property(5, String.class, "accNote", false, "ACC_NOTE");
        public final static Property AccIsDel = new Property(6, Boolean.class, "accIsDel", false, "ACC_IS_DEL");
        public final static Property OperateFlag = new Property(7, Integer.class, "operateFlag", false, "OPERATE_FLAG");
        public final static Property UserId = new Property(8, Integer.class, "userId", false, "USER_ID");
    }

    private DaoSession daoSession;

    private Query<Account> user_AccountListQuery;

    public AccountDao(DaoConfig config) {
        super(config);
    }
    
    public AccountDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ACCOUNT\" (" + //
                "\"ACC_ID\" INTEGER PRIMARY KEY ," + // 0: accId
                "\"ACC_CREATE_DATE\" TEXT," + // 1: accCreateDate
                "\"ACC_TYPE\" INTEGER," + // 2: accType
                "\"ACC_STYLE\" TEXT," + // 3: accStyle
                "\"ACC_MONEY\" REAL," + // 4: accMoney
                "\"ACC_NOTE\" TEXT," + // 5: accNote
                "\"ACC_IS_DEL\" INTEGER," + // 6: accIsDel
                "\"OPERATE_FLAG\" INTEGER," + // 7: operateFlag
                "\"USER_ID\" INTEGER);"); // 8: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ACCOUNT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Integer accId = entity.getAccId();
        if (accId != null) {
            stmt.bindLong(1, accId);
        }
 
        String accCreateDate = entity.getAccCreateDate();
        if (accCreateDate != null) {
            stmt.bindString(2, accCreateDate);
        }
 
        Boolean accType = entity.getAccType();
        if (accType != null) {
            stmt.bindLong(3, accType ? 1L: 0L);
        }
 
        String accStyle = entity.getAccStyle();
        if (accStyle != null) {
            stmt.bindString(4, accStyle);
        }
 
        Double accMoney = entity.getAccMoney();
        if (accMoney != null) {
            stmt.bindDouble(5, accMoney);
        }
 
        String accNote = entity.getAccNote();
        if (accNote != null) {
            stmt.bindString(6, accNote);
        }
 
        Boolean accIsDel = entity.getAccIsDel();
        if (accIsDel != null) {
            stmt.bindLong(7, accIsDel ? 1L: 0L);
        }
 
        Integer operateFlag = entity.getOperateFlag();
        if (operateFlag != null) {
            stmt.bindLong(8, operateFlag);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(9, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Account entity) {
        stmt.clearBindings();
 
        Integer accId = entity.getAccId();
        if (accId != null) {
            stmt.bindLong(1, accId);
        }
 
        String accCreateDate = entity.getAccCreateDate();
        if (accCreateDate != null) {
            stmt.bindString(2, accCreateDate);
        }
 
        Boolean accType = entity.getAccType();
        if (accType != null) {
            stmt.bindLong(3, accType ? 1L: 0L);
        }
 
        String accStyle = entity.getAccStyle();
        if (accStyle != null) {
            stmt.bindString(4, accStyle);
        }
 
        Double accMoney = entity.getAccMoney();
        if (accMoney != null) {
            stmt.bindDouble(5, accMoney);
        }
 
        String accNote = entity.getAccNote();
        if (accNote != null) {
            stmt.bindString(6, accNote);
        }
 
        Boolean accIsDel = entity.getAccIsDel();
        if (accIsDel != null) {
            stmt.bindLong(7, accIsDel ? 1L: 0L);
        }
 
        Integer operateFlag = entity.getOperateFlag();
        if (operateFlag != null) {
            stmt.bindLong(8, operateFlag);
        }
 
        Integer userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(9, userId);
        }
    }

    @Override
    protected final void attachEntity(Account entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0);
    }    

    @Override
    public Account readEntity(Cursor cursor, int offset) {
        Account entity = new Account( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // accId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // accCreateDate
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // accType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // accStyle
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // accMoney
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // accNote
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // accIsDel
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // operateFlag
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Account entity, int offset) {
        entity.setAccId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setAccCreateDate(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAccType(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setAccStyle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAccMoney(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setAccNote(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAccIsDel(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setOperateFlag(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setUserId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(Account entity, long rowId) {
        return entity.getAccId();
    }
    
    @Override
    public Integer getKey(Account entity) {
        if(entity != null) {
            return entity.getAccId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Account entity) {
        return entity.getAccId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "accountList" to-many relationship of User. */
    public List<Account> _queryUser_AccountList(Integer accId) {
        synchronized (this) {
            if (user_AccountListQuery == null) {
                QueryBuilder<Account> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.AccId.eq(null));
                user_AccountListQuery = queryBuilder.build();
            }
        }
        Query<Account> query = user_AccountListQuery.forCurrentThread();
        query.setParameter(0, accId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserDao().getAllColumns());
            builder.append(" FROM ACCOUNT T");
            builder.append(" LEFT JOIN USER T0 ON T.\"USER_ID\"=T0.\"USER_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Account loadCurrentDeep(Cursor cursor, boolean lock) {
        Account entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        User user = loadCurrentOther(daoSession.getUserDao(), cursor, offset);
        entity.setUser(user);

        return entity;    
    }

    public Account loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Account> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Account> list = new ArrayList<Account>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Account> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Account> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
